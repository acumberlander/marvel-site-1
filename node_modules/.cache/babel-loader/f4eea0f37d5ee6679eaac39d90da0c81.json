{"ast":null,"code":"import axios from \"axios\";\nimport apiKeys from \"../apiKeys\";\nvar firebaseUrl = apiKeys.apiKeys.firebaseConfig.databaseURL;\n\nvar getAllCollectionItemsByUid = function getAllCollectionItemsByUid(uid) {\n  return new Promise(function (resolve, reject) {\n    axios.get(\"\".concat(firebaseUrl, \"/collection.json?orderBy=\\\"uid\\\"&equalTo=\").concat(uid)).then(function (result) {\n      var collectionObject = result.data;\n      var collectionArray = [];\n\n      if (collectionObject != null) {\n        Object.keys(collectionObject).forEach(function (collectionId) {\n          collectionObject[collectionId].collectionId = collectionId;\n          collectionArray.push(collectionObject[collectionId]);\n        });\n        collectionArray.sort(function (a, b) {\n          if (a.date < b.date) {\n            return -1;\n          }\n\n          if (a.date > b.date) {\n            return 1;\n          }\n\n          return 0;\n        });\n      }\n\n      resolve(collectionArray);\n    }).catch(function (error) {\n      reject(error);\n    });\n  });\n};\n\nvar addCollectionItem = function addCollectionItem(newItem) {\n  return new Promise(function (resolve, reject) {\n    axios.post(\"\".concat(firebaseUrl, \"/collection.json\"), newItem).then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      return reject(err);\n    });\n  });\n};\n\nvar deleteFromCollection = function deleteFromCollection(itemId) {\n  axios.delete(\"\".concat(firebaseUrl, \"/collection/\").concat(itemId, \".json\"));\n};\n\nexport default {\n  getAllCollectionItemsByUid: getAllCollectionItemsByUid,\n  addCollectionItem: addCollectionItem,\n  deleteFromCollection: deleteFromCollection\n};","map":{"version":3,"sources":["C:\\Users\\acumberlander\\projects\\marvel-site-1\\src\\App\\Helpers\\Data\\Requests\\collectionRequest.js"],"names":["axios","apiKeys","firebaseUrl","firebaseConfig","databaseURL","getAllCollectionItemsByUid","uid","Promise","resolve","reject","get","then","result","collectionObject","data","collectionArray","Object","keys","forEach","collectionId","push","sort","a","b","date","catch","error","addCollectionItem","newItem","post","res","err","deleteFromCollection","itemId","delete"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,OAAP,MAAoB,YAApB;AAEA,IAAMC,WAAW,GAAGD,OAAO,CAACA,OAAR,CAAgBE,cAAhB,CAA+BC,WAAnD;;AAEA,IAAMC,0BAA0B,GAAG,SAA7BA,0BAA6B,CAACC,GAAD;AAAA,SACjC,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAC/BT,IAAAA,KAAK,CACFU,GADH,WACUR,WADV,sDAC+DI,GAD/D,GAEGK,IAFH,CAEQ,UAACC,MAAD,EAAY;AAChB,UAAMC,gBAAgB,GAAGD,MAAM,CAACE,IAAhC;AACA,UAAMC,eAAe,GAAG,EAAxB;;AACA,UAAIF,gBAAgB,IAAI,IAAxB,EAA8B;AAC5BG,QAAAA,MAAM,CAACC,IAAP,CAAYJ,gBAAZ,EAA8BK,OAA9B,CAAsC,UAACC,YAAD,EAAkB;AACtDN,UAAAA,gBAAgB,CAACM,YAAD,CAAhB,CAA+BA,YAA/B,GAA8CA,YAA9C;AACAJ,UAAAA,eAAe,CAACK,IAAhB,CAAqBP,gBAAgB,CAACM,YAAD,CAArC;AACD,SAHD;AAIAJ,QAAAA,eAAe,CAACM,IAAhB,CAAqB,UAACC,CAAD,EAAIC,CAAJ,EAAU;AAC7B,cAAID,CAAC,CAACE,IAAF,GAASD,CAAC,CAACC,IAAf,EAAqB;AACnB,mBAAO,CAAC,CAAR;AACD;;AACD,cAAIF,CAAC,CAACE,IAAF,GAASD,CAAC,CAACC,IAAf,EAAqB;AACnB,mBAAO,CAAP;AACD;;AACD,iBAAO,CAAP;AACD,SARD;AASD;;AACDhB,MAAAA,OAAO,CAACO,eAAD,CAAP;AACD,KArBH,EAsBGU,KAtBH,CAsBS,UAACC,KAAD,EAAW;AAChBjB,MAAAA,MAAM,CAACiB,KAAD,CAAN;AACD,KAxBH;AAyBD,GA1BD,CADiC;AAAA,CAAnC;;AA6BA,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,CAACC,OAAD;AAAA,SACxB,IAAIrB,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAC/BT,IAAAA,KAAK,CACF6B,IADH,WACW3B,WADX,uBAC0C0B,OAD1C,EAEGjB,IAFH,CAEQ,UAACmB,GAAD,EAAS;AACbtB,MAAAA,OAAO,CAACsB,GAAD,CAAP;AACD,KAJH,EAKGL,KALH,CAKS,UAACM,GAAD;AAAA,aAAStB,MAAM,CAACsB,GAAD,CAAf;AAAA,KALT;AAMD,GAPD,CADwB;AAAA,CAA1B;;AAUA,IAAMC,oBAAoB,GAAG,SAAvBA,oBAAuB,CAACC,MAAD,EAAY;AACvCjC,EAAAA,KAAK,CAACkC,MAAN,WAAgBhC,WAAhB,yBAA0C+B,MAA1C;AACD,CAFD;;AAIA,eAAe;AACb5B,EAAAA,0BAA0B,EAA1BA,0BADa;AAEbsB,EAAAA,iBAAiB,EAAjBA,iBAFa;AAGbK,EAAAA,oBAAoB,EAApBA;AAHa,CAAf","sourcesContent":["import axios from \"axios\";\r\nimport apiKeys from \"../apiKeys\";\r\n\r\nconst firebaseUrl = apiKeys.apiKeys.firebaseConfig.databaseURL;\r\n\r\nconst getAllCollectionItemsByUid = (uid) =>\r\n  new Promise((resolve, reject) => {\r\n    axios\r\n      .get(`${firebaseUrl}/collection.json?orderBy=\"uid\"&equalTo=${uid}`)\r\n      .then((result) => {\r\n        const collectionObject = result.data;\r\n        const collectionArray = [];\r\n        if (collectionObject != null) {\r\n          Object.keys(collectionObject).forEach((collectionId) => {\r\n            collectionObject[collectionId].collectionId = collectionId;\r\n            collectionArray.push(collectionObject[collectionId]);\r\n          });\r\n          collectionArray.sort((a, b) => {\r\n            if (a.date < b.date) {\r\n              return -1;\r\n            }\r\n            if (a.date > b.date) {\r\n              return 1;\r\n            }\r\n            return 0;\r\n          });\r\n        }\r\n        resolve(collectionArray);\r\n      })\r\n      .catch((error) => {\r\n        reject(error);\r\n      });\r\n  });\r\n\r\nconst addCollectionItem = (newItem) =>\r\n  new Promise((resolve, reject) => {\r\n    axios\r\n      .post(`${firebaseUrl}/collection.json`, newItem)\r\n      .then((res) => {\r\n        resolve(res);\r\n      })\r\n      .catch((err) => reject(err));\r\n  });\r\n\r\nconst deleteFromCollection = (itemId) => {\r\n  axios.delete(`${firebaseUrl}/collection/${itemId}.json`);\r\n};\r\n\r\nexport default {\r\n  getAllCollectionItemsByUid,\r\n  addCollectionItem,\r\n  deleteFromCollection,\r\n};\r\n"]},"metadata":{},"sourceType":"module"}