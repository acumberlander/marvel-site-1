{"ast":null,"code":"import axios from \"axios\";\nimport apiKeys from \"../apiKeys\";\nvar firebaseUrl = apiKeys.apiKeys.firebaseConfig.databaseURL;\n\nvar getCollection = function getCollection() {\n  new Promise(function (resolve, reject) {\n    axios.get(\"\".concat(firebaseUrl, \"/collection.json\")).then(function (result) {\n      var collectionObj = result.data;\n      resolve(collectionObj);\n    }).catch(function (err) {\n      return reject(err);\n    });\n  });\n};\n\nvar getAllCollectionItemsByUid = function getAllCollectionItemsByUid(uid) {\n  return new Promise(function (resolve, reject) {\n    axios.get(\"\".concat(firebaseUrl, \"/collection.json?orderBy=\\\"uid\\\"&equalTo=\\\"\").concat(uid, \"\\\"\")).then(function (result) {\n      var collectionObject = result.data;\n      var collectionArray = [];\n\n      if (collectionObject != null) {\n        Object.keys(collectionObject).forEach(function (collectionId) {\n          collectionObject[collectionId].collectionId = collectionId;\n          collectionArray.push(collectionObject[collectionId]);\n          /*This is not ideal. Using as a hack to account for the fact that \r\n            I don't have access to the firebase generated id until after it's been\r\n            posted.That's why I'm having to push up, pull it down again and repost with \r\n            the collection id embed within the object.*/\n\n          deleteFromCollection(collectionId);\n          addCollectionItem(collectionObject[collectionId]);\n        });\n        collectionArray.sort(function (a, b) {\n          if (a.date < b.date) {\n            return -1;\n          }\n\n          if (a.date > b.date) {\n            return 1;\n          }\n\n          return 0;\n        });\n      }\n\n      resolve(collectionArray);\n    }).catch(function (error) {\n      reject(error);\n    });\n  });\n};\n\nvar addCollectionItem = function addCollectionItem(newItem) {\n  return new Promise(function (resolve, reject) {\n    axios.post(\"\".concat(firebaseUrl, \"/collection.json\"), newItem).then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      return reject(err);\n    });\n  });\n};\n\nvar deleteFromCollection = function deleteFromCollection(itemId) {\n  return axios.delete(\"\".concat(firebaseUrl, \"/collection/\").concat(itemId, \".json\"));\n};\n\nexport default {\n  getAllCollectionItemsByUid: getAllCollectionItemsByUid,\n  addCollectionItem: addCollectionItem,\n  deleteFromCollection: deleteFromCollection\n};","map":{"version":3,"sources":["C:\\Users\\acumberlander\\projects\\marvel-site-1\\src\\App\\Helpers\\Data\\Requests\\collectionRequest.js"],"names":["axios","apiKeys","firebaseUrl","firebaseConfig","databaseURL","getCollection","Promise","resolve","reject","get","then","result","collectionObj","data","catch","err","getAllCollectionItemsByUid","uid","collectionObject","collectionArray","Object","keys","forEach","collectionId","push","deleteFromCollection","addCollectionItem","sort","a","b","date","error","newItem","post","res","itemId","delete"],"mappings":"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","sourcesContent":["import axios from \"axios\";\r\nimport apiKeys from \"../apiKeys\";\r\n\r\nconst firebaseUrl = apiKeys.apiKeys.firebaseConfig.databaseURL;\r\n\r\nconst getCollection = () => {\r\n  new Promise((resolve, reject) => {\r\n    axios\r\n      .get(`${firebaseUrl}/collection.json`)\r\n      .then((result) => {\r\n        let collectionObj = result.data;\r\n        resolve(collectionObj);\r\n      })\r\n      .catch((err) => reject(err));\r\n  });\r\n};\r\n\r\nconst getAllCollectionItemsByUid = (uid) =>\r\n  new Promise((resolve, reject) => {\r\n    axios\r\n      .get(`${firebaseUrl}/collection.json?orderBy=\"uid\"&equalTo=\"${uid}\"`)\r\n      .then((result) => {\r\n        const collectionObject = result.data;\r\n        const collectionArray = [];\r\n        if (collectionObject != null) {\r\n          Object.keys(collectionObject).forEach((collectionId) => {\r\n            collectionObject[collectionId].collectionId = collectionId;\r\n            collectionArray.push(collectionObject[collectionId]);\r\n            /*This is not ideal. Using as a hack to account for the fact that \r\n              I don't have access to the firebase generated id until after it's been\r\n              posted.That's why I'm having to push up, pull it down again and repost with \r\n              the collection id embed within the object.*/\r\n            deleteFromCollection(collectionId);\r\n            addCollectionItem(collectionObject[collectionId]);\r\n          });\r\n          collectionArray.sort((a, b) => {\r\n            if (a.date < b.date) {\r\n              return -1;\r\n            }\r\n            if (a.date > b.date) {\r\n              return 1;\r\n            }\r\n            return 0;\r\n          });\r\n        }\r\n        resolve(collectionArray);\r\n      })\r\n      .catch((error) => {\r\n        reject(error);\r\n      });\r\n  });\r\n\r\nconst addCollectionItem = (newItem) =>\r\n  new Promise((resolve, reject) => {\r\n    axios\r\n      .post(`${firebaseUrl}/collection.json`, newItem)\r\n      .then((res) => {\r\n        resolve(res);\r\n      })\r\n      .catch((err) => reject(err));\r\n  });\r\n\r\nconst deleteFromCollection = (itemId) =>\r\n  axios.delete(`${firebaseUrl}/collection/${itemId}.json`);\r\n\r\nexport default {\r\n  getAllCollectionItemsByUid,\r\n  addCollectionItem,\r\n  deleteFromCollection,\r\n};\r\n"]},"metadata":{},"sourceType":"module"}