{"ast":null,"code":"import _toConsumableArray from \"C:\\\\Users\\\\acumberlander\\\\projects\\\\marvel-site-1\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport axios from \"axios\";\nimport apiKeys from \"../apiKeys\";\nimport userRequests from \"./userRequests\";\nimport authRequests from \"./authRequests\";\nvar firebaseUrl = apiKeys.apiKeys.firebaseConfig.databaseURL;\n\nvar getCollection = function getCollection() {\n  return new Promise(function (resolve, reject) {\n    return axios.get(\"\".concat(firebaseUrl, \"/collection.json\")).then(function (result) {\n      var collectionObj = result.data;\n      console.log(collectionObj);\n      resolve(collectionObj);\n    }).catch(function (err) {\n      return reject(err);\n    });\n  });\n};\n\nvar getContentById = function getContentById(id) {\n  return getCollection().then(function (res) {\n    var comics = res.Comics;\n    var movies = res.Movies;\n    var popular = res.Popular;\n    var series = res.Series;\n    var contentArray = [].concat(_toConsumableArray(popular), _toConsumableArray(movies), _toConsumableArray(comics), _toConsumableArray(series));\n    var contentItem = contentArray.filter(function (item) {\n      return item.id === id;\n    })[0];\n    console.log(contentItem);\n    return contentItem;\n  });\n};\n\nvar getAllCollectionItemsByUid = function getAllCollectionItemsByUid(uid) {\n  return new Promise(function (resolve, reject) {\n    axios.get(\"\".concat(firebaseUrl, \"/collection.json?orderBy=\\\"uid\\\"&equalTo=\\\"\").concat(uid, \"\\\"\")).then(function (result) {\n      var collectionObject = result.data;\n      var collectionArray = [];\n\n      if (collectionObject != null) {\n        Object.keys(collectionObject).forEach(function (collectionId) {\n          collectionObject[collectionId].collectionId = collectionId;\n          collectionArray.push(collectionObject[collectionId]);\n          /*This is not ideal. Using as a hack to account for the fact that \r\n            I don't have access to the firebase generated id until after it's been\r\n            posted.That's why I'm having to push up, pull it down again and repost with \r\n            the collection id embed within the object.*/\n\n          deleteFromCollection(collectionId);\n          addCollectionItem(collectionObject[collectionId]);\n        });\n        collectionArray.sort(function (a, b) {\n          if (a.date < b.date) {\n            return -1;\n          }\n\n          if (a.date > b.date) {\n            return 1;\n          }\n\n          return 0;\n        });\n      }\n\n      resolve(collectionArray);\n    }).catch(function (error) {\n      reject(error);\n    });\n  });\n};\n\nvar addCollectionItem = function addCollectionItem(uid, newItem) {\n  return userRequests.getUserByUid(uid).then(function (res) {\n    var userObject = res;\n    var userKey = res[\"id\"];\n\n    if (!userObject.collection) {\n      userObject.collection = [newItem];\n      userRequests.updateUserCollection(userObject, userKey);\n    } else {\n      var filteredArr = userObject.collection.filter(function (item) {\n        return item.id === newItem.id;\n      });\n      if (filteredArr.length === 0) userObject.collection.push(newItem);\n      userRequests.updateUserCollection(userObject, userKey);\n    }\n  });\n};\n\nvar deleteFromCollection = function deleteFromCollection(uid, item) {\n  return userRequests.getUserByUid(uid).then(function (res) {\n    var userKey = res[\"id\"];\n    var userObject = res;\n    userRequests.deleteUserCollectionItem(userKey);\n    var updatedArr = userObject.collection.filter(function (x) {\n      return x.id !== item.id;\n    });\n    userObject.collection = updatedArr;\n    userRequests.updateUserCollection(userObject, userKey);\n  });\n};\n\nexport default {\n  getAllCollectionItemsByUid: getAllCollectionItemsByUid,\n  addCollectionItem: addCollectionItem,\n  deleteFromCollection: deleteFromCollection,\n  getCollection: getCollection,\n  getContentById: getContentById\n};","map":{"version":3,"sources":["C:\\Users\\acumberlander\\projects\\marvel-site-1\\src\\App\\Helpers\\Data\\Requests\\collectionRequest.js"],"names":["axios","apiKeys","userRequests","authRequests","firebaseUrl","firebaseConfig","databaseURL","getCollection","Promise","resolve","reject","get","then","result","collectionObj","data","console","log","catch","err","getContentById","id","res","comics","Comics","movies","Movies","popular","Popular","series","Series","contentArray","contentItem","filter","item","getAllCollectionItemsByUid","uid","collectionObject","collectionArray","Object","keys","forEach","collectionId","push","deleteFromCollection","addCollectionItem","sort","a","b","date","error","newItem","getUserByUid","userObject","userKey","collection","updateUserCollection","filteredArr","length","deleteUserCollectionItem","updatedArr","x"],"mappings":"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","sourcesContent":["import axios from \"axios\";\r\nimport apiKeys from \"../apiKeys\";\r\nimport userRequests from \"./userRequests\";\r\nimport authRequests from \"./authRequests\";\r\n\r\nconst firebaseUrl = apiKeys.apiKeys.firebaseConfig.databaseURL;\r\n\r\nconst getCollection = () =>\r\n  new Promise((resolve, reject) =>\r\n    axios\r\n      .get(`${firebaseUrl}/collection.json`)\r\n      .then((result) => {\r\n        let collectionObj = result.data;\r\n        console.log(collectionObj);\r\n        resolve(collectionObj);\r\n      })\r\n      .catch((err) => reject(err))\r\n  );\r\n\r\nconst getContentById = (id) =>\r\n  getCollection().then((res) => {\r\n    let comics = res.Comics;\r\n    let movies = res.Movies;\r\n    let popular = res.Popular;\r\n    let series = res.Series;\r\n    let contentArray = [...popular, ...movies, ...comics, ...series];\r\n    let contentItem = contentArray.filter((item) => item.id === id)[0];\r\n    console.log(contentItem);\r\n    return contentItem;\r\n  });\r\n\r\nconst getAllCollectionItemsByUid = (uid) =>\r\n  new Promise((resolve, reject) => {\r\n    axios\r\n      .get(`${firebaseUrl}/collection.json?orderBy=\"uid\"&equalTo=\"${uid}\"`)\r\n      .then((result) => {\r\n        const collectionObject = result.data;\r\n        const collectionArray = [];\r\n        if (collectionObject != null) {\r\n          Object.keys(collectionObject).forEach((collectionId) => {\r\n            collectionObject[collectionId].collectionId = collectionId;\r\n            collectionArray.push(collectionObject[collectionId]);\r\n            /*This is not ideal. Using as a hack to account for the fact that \r\n              I don't have access to the firebase generated id until after it's been\r\n              posted.That's why I'm having to push up, pull it down again and repost with \r\n              the collection id embed within the object.*/\r\n            deleteFromCollection(collectionId);\r\n            addCollectionItem(collectionObject[collectionId]);\r\n          });\r\n          collectionArray.sort((a, b) => {\r\n            if (a.date < b.date) {\r\n              return -1;\r\n            }\r\n            if (a.date > b.date) {\r\n              return 1;\r\n            }\r\n            return 0;\r\n          });\r\n        }\r\n        resolve(collectionArray);\r\n      })\r\n      .catch((error) => {\r\n        reject(error);\r\n      });\r\n  });\r\n\r\nconst addCollectionItem = (uid, newItem) =>\r\n  userRequests.getUserByUid(uid).then((res) => {\r\n    let userObject = res;\r\n    let userKey = res[\"id\"];\r\n\r\n    if (!userObject.collection) {\r\n      userObject.collection = [newItem];\r\n      userRequests.updateUserCollection(userObject, userKey);\r\n    } else {\r\n      let filteredArr = userObject.collection.filter(\r\n        (item) => item.id === newItem.id\r\n      );\r\n\r\n      if (filteredArr.length === 0) userObject.collection.push(newItem);\r\n      userRequests.updateUserCollection(userObject, userKey);\r\n    }\r\n  });\r\n\r\nconst deleteFromCollection = (uid, item) =>\r\n  userRequests.getUserByUid(uid).then((res) => {\r\n    let userKey = res[\"id\"];\r\n    let userObject = res;\r\n    userRequests.deleteUserCollectionItem(userKey);\r\n\r\n    let updatedArr = userObject.collection.filter((x) => x.id !== item.id);\r\n    userObject.collection = updatedArr;\r\n    userRequests.updateUserCollection(userObject, userKey);\r\n  });\r\n\r\nexport default {\r\n  getAllCollectionItemsByUid,\r\n  addCollectionItem,\r\n  deleteFromCollection,\r\n  getCollection,\r\n  getContentById,\r\n};\r\n"]},"metadata":{},"sourceType":"module"}